#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = LL
#RegularDefinitions
dig: [0-9]
letra: [a-zA-Z]
coment_lin: ["\\"][^\n]*
coment_col: "{"[^}]*"}"
#Tokens
//IDENTIFICADOR
id: {letra}(("_"?{letra}|{dig})*"_"?|"_"?)

//CONSTANTE INTEIRA
const_int: 0|([1-9]{dig}*)

//CONSTANTE REAL
const_real: (0|([1-9]{dig}*))","{dig}+

//CONSTANTE CARACTERE
const_carc: \"([^\n\\\"]|("\"[\\\"]))*\"

//IGNORAR
: [\s\t\n\r]*|{coment_lin}|{coment_col}

//SÍMBOLOS ESPECIAIS
":"
"("
")"
"="
":="
","
"&&"
"||"
"!"
"!="
"<"
"<="
">"
">="
"+"
"-"
"*"
"/"

//PALAVRA RESERVADA
BOOL = id: "bool"
CONSTS = id: "consts"
DEF = id: "def"
END = id: "end"
EXECUTE = id: "execute"
FALSE = id: "false"
FLOAT = id: "float"
GET = id: "get"
IFFALSE = id: "ifFalse"
IFTRUE = id: "ifTrue"
INPUT = id: "input"
INT = id: "int"
PRINT = id: "print"
PRINTLN = id: "println"
SET = id: "set"
STR = id: "str"
TRUE = id: "true"
TYPES = id: "types"
VAR = id: "var"
WHILEFALSE = id: "whileFalse"
WHILETRUE = id: "whileTrue"
#NonTerminals
<programa>
<def_tipo>
<declara_id>
<e_do_tipo>
<simples>
<lista_de_campos>
<lista_de_campos1>
<campo> 
<def_const>
<declara_consts>
<declara_consts1>
<valor>
<declara_var>
<declara_tipo>
<declara_tipo1>
<tipo>
<lista_de_identificadores>
<lista_de_identificadores1>
<lista_comandos>
<lista_comandos1>
<comando>
<comand_atribuicao>
<comand_manipulacao_compostos>
<comand_entrada_dados>
<saida_dados>
<lista_de_expressoes>
<lista_de_expressoes1>
<selecao>
<selecao1>
<condicao>
<repeticao>
<condicao_repeticao>
<expressao>
<expressao1>
<elemento>
<relacional>
<relacional1>
<operador_relacional>
<aritmetica>
<aritmetica1>
<termo>
<termo1>
<fator>
<fator1>
#Grammar
<programa>::= DEF <def_tipo> <def_const> <declara_var> EXECUTE <lista_comandos>;
 
<def_tipo>::= TYPES <declara_id> | î;
<declara_id>::= id ":" <e_do_tipo> <declara_id> | î;
<e_do_tipo>::= <simples> | "(" <lista_de_campos> ")";
<simples>::= INT | FLOAT | STR | BOOL;
<lista_de_campos>::= <campo> <lista_de_campos1>;
<lista_de_campos1>::= <lista_de_campos> | î;
<campo> ::= id ":" <simples>;
 
<def_const>::= CONSTS <declara_consts> | î;
<declara_consts>::= <lista_de_identificadores> "=" <valor> <declara_consts1>;
<declara_consts1>::= <declara_consts> | î;
<valor>::= const_int | const_real | const_carc | TRUE | FALSE;
 
<declara_var>::= VAR <declara_tipo> | î;
<declara_tipo>::= <lista_de_identificadores> ":" <tipo> <declara_tipo1>;
<declara_tipo1>::= <declara_tipo> | î;
<tipo>::= INT | FLOAT | STR | BOOL | id;
<lista_de_identificadores>::= id <lista_de_identificadores1>;
<lista_de_identificadores1>::= "," <lista_de_identificadores> | î;
 
<lista_comandos>::= <comando> <lista_comandos1>;
<lista_comandos1>::= <lista_comandos> | î;
<comando>::= <comand_atribuicao> | <comand_manipulacao_compostos> | <comand_entrada_dados> | <saida_dados> | <selecao> | <repeticao>;
<comand_atribuicao>::= id ":=" <expressao>;

<comand_manipulacao_compostos>::= id SET "("id "," <expressao>")";

<comand_entrada_dados>::= INPUT "(" <lista_de_identificadores> ")";

<saida_dados>::= PRINT"(" <lista_de_expressoes> ")" | PRINTLN "(" <lista_de_expressoes> ")";
<lista_de_expressoes>::= <expressão> <lista_de_expressoes1>;
<lista_de_expressoes1>::= "," <lista_de_expressoes> | î;

<selecao>::= "(" <expressao> ")" <selecao1>;
<selecao1>::= <condicao> ":" <lista_comandos1> END | IFTRUE ":" <lista_comandos1> IFFALSE ":" <lista_comandos1> END;
<condicao>::= IFTRUE | IFFALSE;

<repeticao>::= "(" <expressao> ")" <condicao_repeticao> ":" <lista_comandos1> END;
<condicao_repeticao>::= WHILETRUE | WHILEFALSE;

<expressao>::= <elemento> <expressao1>;
<expressao1>::= "&&" <elemento> <expressao1> | "||" <elemento> <expressao1> | î;

<elemento>::= <relacional> | TRUE | FALSE | "!" <elemento>;

<relacional>::= <aritmetica> <relacional1>;
<relacional1>::= <operador_relacional> <aritmetica> | î;

<operador_relacional>::= "=" | "!=" | "<" | "<=" | ">" | ">=";

<aritmetica>::= <termo> <aritmetica1>;
<aritmetica1>::= "+" <termo> <aritmetica1> | "-" <termo> <aritmetica1> | î;

<termo>::= <fator> <termo1>;
<termo1>::= "*" <fator> <termo1> | "/" <fator> <termo1> | î;

<fator>::= id <fator1> | const_int | const_real | const_carc | "(" <expressao> ")" | "+" <fator> | "-" <fator>;
<fator1>::= GET "(" id ")" | î;
